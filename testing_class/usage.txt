I made some improvements to the "new" motor class, probably still needs some other improvements, but from what I can tell it does run at about the time I set for it.
It's not that well documented, but it's not that hard to figure out.

For the most part you use it like a library:

create a object:

Motor bot(left enable, right enable, L1, L2, L3, L4, calibrate); 
where L1, L2, L3, L4 those are the pins connected to your motor driver (so for me, I think
L1 is Pin 36 on the Arduino, L2 is 38, etc....)
calibrate is either a 1 (yes) or a zero (no) - and it's used if you have a hall effect sensor hooked up for counting pulses. (1 yes I have a hall effect)

You have your object created named bot now:
in setup you'll need to:
bot.begin(); - this will setup all the start setting, turn everything low, set speeds to zero, calibrate (if needed)


bot.Speed(leftspeed, rightspeed); - this can still be used to change speeds while the motors are running, I've added a speed to the drive commands now as well, in an attempt to have it ramp speed way up for starting, and slow back down, this sort of worked

bot.stop(); - set pins to low and pwm to zero, also sets the _isrunning flag to zero

bot.forward(time, leftspeed, rightspeed);  - time is how long you want the motors to run, speed is pwm to send to motors
bot.back(time,leftspeed, rightspeed);
bot.rightTight(T,L,R); - T-time, L-left speed, R- right speed
bot.leftTight(T,L,R);
bot.right(T,L,R);
bot.left(T,L,R);

bot.update(); - used to see if time is equal to or exceeded the set on time for the motors, if yes turns motors off (stop), and resets PWM speeds, if no, exits does nothing
see the sketch for how I used this.

bot.calibrate(); - this is used if you have a hall effect sensor, it's called from the begin function, but could be used if you feel the motors are way out of alignment, - What it does is spin the right wheel (slowly) until the magnet is under the hall effect sensor, it then switches to the left wheel and does the same. - if the calibrate flag is set to zero, it will bypass this and exit clean. (This is true even if you call it yourself from the main part of the sketch, so it's only used if you have the hall effect sensors).  My thinking was since only one magnet is being used it might be good to know where the wheels start at.
(it maybe too slow if it's sitting on a table to finish the calibrate, and a timeout needs to be put in, with a calibrate fail message)

bot.IsRunning(); - use this to see if the motors are suppose to be spinning, this does not tell that they are spinning, just that they should be spinning.  It's a 1 for yes, and zero for no
see the sketch for how I used this, of course it can be used for other things as well.

The counting for the hall effect is done outside of the Motor class, it appears you can't attach an Interrupt inside a class, but this is ok, because the class has the "calibrate" flag now to handle what the hall effect needs inside the class.

--- I think I want to add something for a max speed PWM (255) and a min speed PWM (55-60 for these motors) - with a check inside the Speed function that would reject values outside the max and min.

--- I also was thinking of changing the drive part again, with something like (for example)
bot.go(Time, leftspeed, rightspeed, FORWARD);  or bot.go(Time, leftspeed, rightspeed, left direction, right direction);  I might save that for later.... I think it would shorten the class up a lot.

The way the class is currently written - you can send two different speeds to the motors (left side and right side) - which means, you can already make turns just using speed. - So Motor::left & Motor::right are not really needed now...but it takes some thinking when you program it.

The two speeds thou are used to try and keep the bot running in a straight line, it doesn't make a difference for the (I don't think, for the tight turns, where one wheel spins forward, and one backward), left and right turn on one motor while holding the other motor at zero.
tight turns will give a turn in place type of thing, while one motor on and the other off will give a wide turn.

I think I might have Left and Right backward too...so someone else verify that.

